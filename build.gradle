/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'noricc' at '9/17/18 11:09 AM' with Gradle 2.10
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.10/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
buildscript {
    ext.kotlin_version = '1.3.11'
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'application' // For running as an app.
    // If this doesn't work, update gradle using // $ ./gradlew wrapper
    // $ ./gradlew wrapper --gradle-version <version>

}

compileJava {
    sourceCompatibility = 9
    targetCompatibility = 9
}

apply plugin: 'kotlin'

mainClassName = 'se.lth.cs.ApplicationRunner'
applicationDefaultJvmArgs = ["-Djava.library.path=/usr/lib/x86_64-linux-gnu:./lib/native", "-Xbatch"]

sourceSets {
    jmh {
        java.srcDirs = ['src/jmh/java']
        compileClasspath += sourceSets.main.runtimeClasspath
    }
}


// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

test {
    systemProperty 'java.library.path', '/usr/lib/x86_64-linux-gnu/:./papi-java/'
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.13'
    compile files('papi-java/papi.jar')
    compile 'org.slf4j:slf4j-simple:1.7.13'
    compile 'org.eclipse.jgit:org.eclipse.jgit:5.2.1.201812262042-r'

    implementation 'com.google.code.gson:gson:2.8.5'
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    jmhImplementation 'org.openjdk.jmh:jmh-core:1.21'
    jmhImplementation 'org.openjdk.jmh:jmh-generator-annprocess:1.21'
}

task jmh(type: JavaExec, dependsOn: jmhClasses) {
    main = 'se.lth.cs.jmh.Main'
    classpath = sourceSets.jmh.compileClasspath + sourceSets.jmh.runtimeClasspath
}

classes.finalizedBy(jmhClasses)

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
